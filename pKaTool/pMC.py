# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pMC', [dirname(__file__)])
        except ImportError:
            import _pMC
            return _pMC
        if fp is not None:
            try:
                _mod = imp.load_module('_pMC', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _pMC = swig_import_helper()
    del swig_import_helper
else:
    import _pMC
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pMC.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pMC.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pMC.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pMC.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pMC.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pMC.SwigPyIterator_equal(self, *args)
    def copy(self): return _pMC.SwigPyIterator_copy(self)
    def next(self): return _pMC.SwigPyIterator_next(self)
    def __next__(self): return _pMC.SwigPyIterator___next__(self)
    def previous(self): return _pMC.SwigPyIterator_previous(self)
    def advance(self, *args): return _pMC.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pMC.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pMC.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pMC.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pMC.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pMC.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pMC.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pMC.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pMC.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pMC.IntVector___nonzero__(self)
    def __bool__(self): return _pMC.IntVector___bool__(self)
    def __len__(self): return _pMC.IntVector___len__(self)
    def pop(self): return _pMC.IntVector_pop(self)
    def __getslice__(self, *args): return _pMC.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pMC.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pMC.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pMC.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pMC.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pMC.IntVector___setitem__(self, *args)
    def append(self, *args): return _pMC.IntVector_append(self, *args)
    def empty(self): return _pMC.IntVector_empty(self)
    def size(self): return _pMC.IntVector_size(self)
    def clear(self): return _pMC.IntVector_clear(self)
    def swap(self, *args): return _pMC.IntVector_swap(self, *args)
    def get_allocator(self): return _pMC.IntVector_get_allocator(self)
    def begin(self): return _pMC.IntVector_begin(self)
    def end(self): return _pMC.IntVector_end(self)
    def rbegin(self): return _pMC.IntVector_rbegin(self)
    def rend(self): return _pMC.IntVector_rend(self)
    def pop_back(self): return _pMC.IntVector_pop_back(self)
    def erase(self, *args): return _pMC.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pMC.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pMC.IntVector_push_back(self, *args)
    def front(self): return _pMC.IntVector_front(self)
    def back(self): return _pMC.IntVector_back(self)
    def assign(self, *args): return _pMC.IntVector_assign(self, *args)
    def resize(self, *args): return _pMC.IntVector_resize(self, *args)
    def insert(self, *args): return _pMC.IntVector_insert(self, *args)
    def reserve(self, *args): return _pMC.IntVector_reserve(self, *args)
    def capacity(self): return _pMC.IntVector_capacity(self)
    __swig_destroy__ = _pMC.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pMC.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pMC.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pMC.DoubleVector___nonzero__(self)
    def __bool__(self): return _pMC.DoubleVector___bool__(self)
    def __len__(self): return _pMC.DoubleVector___len__(self)
    def pop(self): return _pMC.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pMC.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pMC.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pMC.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pMC.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pMC.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pMC.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pMC.DoubleVector_append(self, *args)
    def empty(self): return _pMC.DoubleVector_empty(self)
    def size(self): return _pMC.DoubleVector_size(self)
    def clear(self): return _pMC.DoubleVector_clear(self)
    def swap(self, *args): return _pMC.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pMC.DoubleVector_get_allocator(self)
    def begin(self): return _pMC.DoubleVector_begin(self)
    def end(self): return _pMC.DoubleVector_end(self)
    def rbegin(self): return _pMC.DoubleVector_rbegin(self)
    def rend(self): return _pMC.DoubleVector_rend(self)
    def pop_back(self): return _pMC.DoubleVector_pop_back(self)
    def erase(self, *args): return _pMC.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pMC.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pMC.DoubleVector_push_back(self, *args)
    def front(self): return _pMC.DoubleVector_front(self)
    def back(self): return _pMC.DoubleVector_back(self)
    def assign(self, *args): return _pMC.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pMC.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pMC.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pMC.DoubleVector_reserve(self, *args)
    def capacity(self): return _pMC.DoubleVector_capacity(self)
    __swig_destroy__ = _pMC.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pMC.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pMC.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pMC.FloatVector___nonzero__(self)
    def __bool__(self): return _pMC.FloatVector___bool__(self)
    def __len__(self): return _pMC.FloatVector___len__(self)
    def pop(self): return _pMC.FloatVector_pop(self)
    def __getslice__(self, *args): return _pMC.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pMC.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pMC.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pMC.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pMC.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pMC.FloatVector___setitem__(self, *args)
    def append(self, *args): return _pMC.FloatVector_append(self, *args)
    def empty(self): return _pMC.FloatVector_empty(self)
    def size(self): return _pMC.FloatVector_size(self)
    def clear(self): return _pMC.FloatVector_clear(self)
    def swap(self, *args): return _pMC.FloatVector_swap(self, *args)
    def get_allocator(self): return _pMC.FloatVector_get_allocator(self)
    def begin(self): return _pMC.FloatVector_begin(self)
    def end(self): return _pMC.FloatVector_end(self)
    def rbegin(self): return _pMC.FloatVector_rbegin(self)
    def rend(self): return _pMC.FloatVector_rend(self)
    def pop_back(self): return _pMC.FloatVector_pop_back(self)
    def erase(self, *args): return _pMC.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pMC.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pMC.FloatVector_push_back(self, *args)
    def front(self): return _pMC.FloatVector_front(self)
    def back(self): return _pMC.FloatVector_back(self)
    def assign(self, *args): return _pMC.FloatVector_assign(self, *args)
    def resize(self, *args): return _pMC.FloatVector_resize(self, *args)
    def insert(self, *args): return _pMC.FloatVector_insert(self, *args)
    def reserve(self, *args): return _pMC.FloatVector_reserve(self, *args)
    def capacity(self): return _pMC.FloatVector_capacity(self)
    __swig_destroy__ = _pMC.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pMC.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class MC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pMC.new_MC(*args)
        try: self.this.append(this)
        except: self.this = this
    def reformat_arrays(self): return _pMC.MC_reformat_arrays(self)
    def set_MCsteps(self, *args): return _pMC.MC_set_MCsteps(self, *args)
    def calc_pKas(self, *args): return _pMC.MC_calc_pKas(self, *args)
    def calc_pKa(self, *args): return _pMC.MC_calc_pKa(self, *args)
    def calc_charge(self, *args): return _pMC.MC_calc_charge(self, *args)
    def calc_charge_Boltzmann(self, *args): return _pMC.MC_calc_charge_Boltzmann(self, *args)
    def get_state_specification(self, *args): return _pMC.MC_get_state_specification(self, *args)
    def get_energy(self, *args): return _pMC.MC_get_energy(self, *args)
    def get_energy_fast(self, *args): return _pMC.MC_get_energy_fast(self, *args)
    def set_monitor_states(self, *args): return _pMC.MC_set_monitor_states(self, *args)
    def print_vector(self, *args): return _pMC.MC_print_vector(self, *args)
    __swig_setmethods__["_intpKas"] = _pMC.MC__intpKas_set
    __swig_getmethods__["_intpKas"] = _pMC.MC__intpKas_get
    if _newclass:_intpKas = _swig_property(_pMC.MC__intpKas_get, _pMC.MC__intpKas_set)
    __swig_setmethods__["_lin_matrix"] = _pMC.MC__lin_matrix_set
    __swig_getmethods__["_lin_matrix"] = _pMC.MC__lin_matrix_get
    if _newclass:_lin_matrix = _swig_property(_pMC.MC__lin_matrix_get, _pMC.MC__lin_matrix_set)
    __swig_setmethods__["_acid_base"] = _pMC.MC__acid_base_set
    __swig_getmethods__["_acid_base"] = _pMC.MC__acid_base_get
    if _newclass:_acid_base = _swig_property(_pMC.MC__acid_base_get, _pMC.MC__acid_base_set)
    __swig_setmethods__["_matrix"] = _pMC.MC__matrix_set
    __swig_getmethods__["_matrix"] = _pMC.MC__matrix_get
    if _newclass:_matrix = _swig_property(_pMC.MC__matrix_get, _pMC.MC__matrix_set)
    __swig_setmethods__["_charges"] = _pMC.MC__charges_set
    __swig_getmethods__["_charges"] = _pMC.MC__charges_get
    if _newclass:_charges = _swig_property(_pMC.MC__charges_get, _pMC.MC__charges_set)
    __swig_setmethods__["_groups"] = _pMC.MC__groups_set
    __swig_getmethods__["_groups"] = _pMC.MC__groups_get
    if _newclass:_groups = _swig_property(_pMC.MC__groups_get, _pMC.MC__groups_set)
    __swig_setmethods__["_MCsteps"] = _pMC.MC__MCsteps_set
    __swig_getmethods__["_MCsteps"] = _pMC.MC__MCsteps_get
    if _newclass:_MCsteps = _swig_property(_pMC.MC__MCsteps_get, _pMC.MC__MCsteps_set)
    __swig_setmethods__["_use_MC"] = _pMC.MC__use_MC_set
    __swig_getmethods__["_use_MC"] = _pMC.MC__use_MC_get
    if _newclass:_use_MC = _swig_property(_pMC.MC__use_MC_get, _pMC.MC__use_MC_set)
    __swig_setmethods__["_do_monitor"] = _pMC.MC__do_monitor_set
    __swig_getmethods__["_do_monitor"] = _pMC.MC__do_monitor_get
    if _newclass:_do_monitor = _swig_property(_pMC.MC__do_monitor_get, _pMC.MC__do_monitor_set)
    __swig_setmethods__["_monitor_state"] = _pMC.MC__monitor_state_set
    __swig_getmethods__["_monitor_state"] = _pMC.MC__monitor_state_get
    if _newclass:_monitor_state = _swig_property(_pMC.MC__monitor_state_get, _pMC.MC__monitor_state_set)
    __swig_setmethods__["_CCPS_population"] = _pMC.MC__CCPS_population_set
    __swig_getmethods__["_CCPS_population"] = _pMC.MC__CCPS_population_get
    if _newclass:_CCPS_population = _swig_property(_pMC.MC__CCPS_population_get, _pMC.MC__CCPS_population_set)
    __swig_setmethods__["lnten"] = _pMC.MC_lnten_set
    __swig_getmethods__["lnten"] = _pMC.MC_lnten_get
    if _newclass:lnten = _swig_property(_pMC.MC_lnten_get, _pMC.MC_lnten_set)
    __swig_destroy__ = _pMC.delete_MC
    __del__ = lambda self : None;
MC_swigregister = _pMC.MC_swigregister
MC_swigregister(MC)



